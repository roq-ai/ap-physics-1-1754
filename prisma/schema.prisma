generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template    template[]
  topic       topic[]
}

model question {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content        String
  question_topic String   @db.VarChar(255)
  template_id    String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  template       template @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model question_generation {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number_of_questions Int
  topic_id            String   @db.Uuid
  user_id             String   @db.Uuid
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  topic               topic    @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model template {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  content         String
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  question        question[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model topic {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(255)
  organization_id     String                @db.Uuid
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  question_generation question_generation[]
  organization        organization          @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                @unique @db.VarChar(255)
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  roq_user_id         String                @db.VarChar(255)
  tenant_id           String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  organization        organization[]
  question_generation question_generation[]
}
